openapi: 3.0.0
info:
  title: My Express API
  version: "1.0.0"
  description: API documentation using YAML
servers:
  - url: /api/v1

paths:
  /user/register:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - phone_number
                - password
                - pin
              properties:
                name:
                  type: string
                  example: John Doe
                phone_number:
                  type: string
                  example: 628123456789
                password:
                  type: string
                  example: mySecretPassword
                pin:
                  type: string
                  example: "123456"
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Validation error

  /user/login:
    post:
      summary: Login user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - password
              properties:
                phone_number:
                  type: string
                  example: 628123456789
                password:
                  type: string
                  example: mySecretPassword
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Invalid credentials

  /user/me:
    get:
      summary: Get user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: John Doe
                      user_id:
                        type: integer
                        example: 1
                  message:
                    type: string
                    example: User data has been fetched
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized

  /user/register-push-token:
    post:
      summary: Register Expo push token for notifications
      tags:
        - Notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - expoPushToken
              properties:
                expoPushToken:
                  type: string
                  example: "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]"
      responses:
        "201":
          description: Push token registered or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 2
                      expoPushToken:
                        type: string
                        example: ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
                      _id:
                        type: string
                        example: thisisidfrommongo
                  message:
                    type: string
                    example: Push token successfully registered
                  code:
                    type: integer
                    example: 201
              examples:
                registered:
                  value:
                    ok: true
                    data:
                      userId: 2
                      expoPushToken: ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
                      _id: thisisidfrommongo
                    message: Push token successfully registered
                    code: 201
                updated:
                  value:
                    ok: true
                    data:
                      userId: 2
                      expoPushToken: ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
                      _id: thisisidfrommongo
                    message: Push token successfully updated
                    code: 201
                alreadyRegistered:
                  value:
                    ok: true
                    data:
                      userId: 2
                      expoPushToken: ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]
                      _id: thisisidfrommongo
                    message: Push token already registered
                    code: 201
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /user/login/request-otp:
    post:
      summary: Request OTP for web login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - password
              properties:
                phone_number:
                  type: string
                  example: "628123456789"
                password:
                  type: string
                  example: "yourPassword"
      responses:
        "201":
          description: OTP sent to registered device
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone_number:
                    type: string
                  sessionId:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /user/login/verify-otp:
    post:
      summary: Verify OTP for web login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - sessionId
                - otp
              properties:
                phone_number:
                  type: string
                  example: "628123456789"
                sessionId:
                  type: string
                  example: "a1b2c3d4-e5f6-7890-1234-56789abcdef0"
                otp:
                  type: string
                  example: "123456"
      responses:
        "201":
          description: OTP verified, JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Invalid or expired OTP

  /user/add-balance:
    patch:
      summary: Add balance to user's mock savings account
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - balance
              properties:
                balance:
                  type: number
                  example: 100000
      responses:
        "200":
          description: Balance added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      balance:
                        type: number
                        example: 200000
                  message:
                    type: string
                    example: User has updated their balance
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: User's mock saving account not found
  
  /user/notification:
    get:
      summary: Get all notifications for the authenticated user
      tags:
        - Notification
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succes to fetch all notif data
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: "666f1e3b2b1a4c001e8b4567"
                        user_id:
                          type: integer
                          example: 2
                        title:
                          type: string
                          example: "Transfer Approved"
                        body:
                          type: string
                          example: "Your transfer has been approved."
                        is_read:
                          type: boolean
                          example: false
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-06-30T10:00:00.000Z"
                  message:
                    type: string
                    example: Succes to fetch all notif data
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /user/notification/{notifId}:
    get:
      summary: Get detail of a notification for the authenticated user
      tags:
        - Notification
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: notifId
          required: true
          schema:
            type: string
          description: Notification ID (MongoDB ObjectId)
          example: "666f1e3b2b1a4c001e8b4567"
      responses:
        "200":
          description: Succes to fetch detail notif data
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "666f1e3b2b1a4c001e8b4567"
                      user_id:
                        type: integer
                        example: 2
                      title:
                        type: string
                        example: "Transfer Approved"
                      body:
                        type: string
                        example: "Your transfer has been approved."
                      is_read:
                        type: boolean
                        example: true
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-06-30T10:00:00.000Z"
                  message:
                    type: string
                    example: Succes to fetch detail notif data
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Notification not found

  /pocket/invite:
    post:
      summary: Invite members to a pocket
      tags:
        - Pocket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pocket_id
                - members
              properties:
                pocket_id:
                  type: integer
                  example: 2
                members:
                  type: array
                  description: List of members to invite
                  items:
                    type: object
                    required:
                      - user_id
                    properties:
                      user_id:
                        type: integer
                        example: 3
                      role:
                        type: string
                        enum: [viewer, admin, spender]
                        example: viewer
      responses:
        "201":
          description: Invitations sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      inviteData:
                        type: object
                        description: Invitation data from MongoDB
                        example:
                          type: pocket_invite
                          inviterUserId: 1
                          invitedUserId: 3
                          pocketId: 2
                          status: pending
                          created_at: 2025-06-21T10:00:00.000Z
                          updated_at: 2025-06-21T10:00:00.000Z
                  message:
                    type: string
                    example: Invite friend success
                  code:
                    type: integer
                    example: 201
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /pocket:
    get:
      summary: Get all user pockets
      tags:
        - Pocket
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of user's pockets
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        pocket_id:
                          type: integer
                          example: 4
                        name:
                          type: string
                        type:
                          type: string
                        target_nominal:
                          type: string
                        current_balance:
                          type: string
                        deadline:
                          type: string
                          format: date-time
                        status:
                          type: string
                        icon_name:
                          type: string
                        color_hex:
                          type: string
                        account_number:
                          type: string
                        user_role:
                          type: string
                  message:
                    type: string
                  code:
                    type: integer
              example:
                ok: true
                data:
                  - pocket_id: 4
                    name: Arisan Keluarga
                    type: saving
                    target_nominal: "2000000"
                    current_balance: "1200000"
                    deadline: "2024-07-01T00:00:00.000Z"
                    status: active
                    icon_name: family
                    color_hex: "#96CEB4"
                    account_number: "PKT001234567893"
                    user_role: viewer
                  - pocket_id: 6
                    name: Liburan Bismillahhhhh
                    type: spending
                    target_nominal: "1000000"
                    current_balance: "1000000"
                    deadline: "2025-12-31T00:00:00.000Z"
                    status: active
                    icon_name: flight_takeoff
                    color_hex: "#00BCD4"
                    account_number: "950859915"
                    user_role: owner
                message: User pockets fetched successfully
                code: 200

    post:
      summary: Create a new pocket
      tags:
        - Pocket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - target_nominal
                - status
              properties:
                name:
                  type: string
                  example: Pocket Keluarga
                type:
                  type: string
                  enum: [saving, spending, business]
                  example: saving
                target_nominal:
                  type: number
                  example: 100000000
                deadline:
                  type: string
                  format: date
                  example: 2025-12-31
                status:
                  type: string
                  example: active
                icon_name:
                  type: string
                  example: flight_takeoff
                color_hex:
                  type: string
                  example: "#00BCD4"
                members:
                  type: array
                  description: List of additional members to invite (excluding the creator)
                  items:
                    type: object
                    required:
                      - user_id
                    properties:
                      user_id:
                        type: integer
                        example: 3
                      role:
                        type: string
                        enum: [viewer, admin, spender]
                        example: viewer
      responses:
        "201":
          description: Pocket and members created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 9
                      name:
                        type: string
                        example: Pocket Keluarga
                      type:
                        type: string
                        example: saving
                      target_nominal:
                        type: string
                        example: "100000000"
                      current_balance:
                        type: string
                        example: "0"
                      deadline:
                        type: string
                        format: date-time
                        example: 2025-12-31T00:00:00.000Z
                      status:
                        type: string
                        example: active
                      owner_user_id:
                        type: integer
                        example: 2
                      icon_name:
                        type: string
                        example: flight_takeoff
                      color_hex:
                        type: string
                        example: "#00BCD4"
                      account_number:
                        type: string
                        example: "872961193"
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-17T02:10:53.934Z
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-17T02:10:53.934Z
                  message:
                    type: string
                    example: Pocket creation and invite friend success
                  code:
                    type: integer
                    example: 201
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /pocket/respond-invite:
    post:
      summary: Respond to a pocket invitation
      tags:
        - Pocket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inviteId
                - response
              properties:
                inviteId:
                  type: string
                  example: "666f1e3b2b1a4c001e8b4567"
                response:
                  type: string
                  enum: [accepted, rejected]
                  example: accepted
      responses:
        "201":
          description: Invitation response processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        example: 3
                      pocket_id:
                        type: integer
                        example: 8
                      role:
                        type: string
                        example: viewer
                      contribution_amount:
                        type: number
                        example: 0
                      joined_at:
                        type: string
                        format: date-time
                        example: 2025-06-19T10:00:00.000Z
                      is_active:
                        type: boolean
                        example: true
                  message:
                    type: string
                    example: "User has respond the invitation. Response: ACCEPTED"
                  code:
                    type: integer
                    example: 201
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Invitation not found
        "409":
          description: Conflict (already responded or already a member)

  /pocket/{id}:
    get:
      summary: Get pocket details by ID
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the pocket to fetch
          example: 2
      responses:
        "200":
          description: Pocket detail fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  name:
                    type: string
                    example: Patungan Laptop Gaming
                  type:
                    type: string
                    example: saving
                  target_nominal:
                    type: string
                    example: "15000000"
                  current_balance:
                    type: string
                    example: "8500000"
                  deadline:
                    type: string
                    format: date-time
                    example: 2024-08-15T00:00:00.000Z
                  status:
                    type: string
                    example: active
                  icon_name:
                    type: string
                    example: laptop
                  color_hex:
                    type: string
                    example: "#4ECDC4"
                  account_number:
                    type: string
                    example: PKT001234567891
                  owner_user_id:
                    type: integer
                    example: 2
                  owner:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Siti Nurhaliza
                      phone_number:
                        type: string
                        example: "6281234567891"
                      PocketMember:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          user_id:
                            type: integer
                            example: 2
                          pocket_id:
                            type: integer
                            example: 2
                          role:
                            type: string
                            example: owner
                          contribution_amount:
                            type: string
                            example: "3000000"
                          joined_at:
                            type: string
                            format: date-time
                            example: 2025-06-18T01:58:55.705Z
                          is_active:
                            type: boolean
                            example: true
                          createdAt:
                            type: string
                            format: date-time
                            example: 2025-06-18T01:58:55.705Z
                          updatedAt:
                            type: string
                            format: date-time
                            example: 2025-06-18T01:58:55.705Z
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Ahmad Rizki
                        phone_number:
                          type: string
                          example: "6281234567890"
                        PocketMember:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 3
                            user_id:
                              type: integer
                              example: 1
                            pocket_id:
                              type: integer
                              example: 2
                            role:
                              type: string
                              example: viewer
                            contribution_amount:
                              type: string
                              example: "2500000"
                            joined_at:
                              type: string
                              format: date-time
                              example: 2025-06-18T01:58:55.705Z
                            is_active:
                              type: boolean
                              example: true
                            createdAt:
                              type: string
                              format: date-time
                              example: 2025-06-18T01:58:55.705Z
                            updatedAt:
                              type: string
                              format: date-time
                              example: 2025-06-18T01:58:55.705Z
                  user_role:
                    type: string
                    example: owner

    patch:
      summary: Update pocket by ID
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the pocket to update
          example: 8
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: diganti wleee
                type:
                  type: string
                  enum: [saving, spending, business]
                  example: spending
      responses:
        "200":
          description: Pocket updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 8
                      name:
                        type: string
                        example: diganti wleee
                      type:
                        type: string
                        example: spending
                      target_nominal:
                        type: string
                        example: "1000000"
                      current_balance:
                        type: string
                        example: "1000000"
                      deadline:
                        type: string
                        format: date-time
                        example: 2025-12-31T00:00:00.000Z
                      status:
                        type: string
                        example: active
                      owner_user_id:
                        type: integer
                        example: 2
                      icon_name:
                        type: string
                        example: flight_takeoff
                      color_hex:
                        type: string
                        example: "#00BCD4"
                      account_number:
                        type: string
                        example: "648946893"
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-16T06:52:27.685Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-17T02:20:28.027Z
                  message:
                    type: string
                    example: Pocket updated successfully
                  code:
                    type: integer
                    example: 200

    delete:
      summary: Delete pocket by ID
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the pocket to delete
          example: 8
      responses:
        "200":
          description: Pocket deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Pocket deleted successfully
                  message:
                    type: string
                    example: Product has been deleted
                  code:
                    type: integer
                    example: 200
  /pocket/{pocketId}/history:
    get:
      summary: Get pocket transaction history for a specific month
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: Pocket ID
        - in: query
          name: month
          required: false
          schema:
            type: string
            pattern: '^\d{4}-\d{2}$'
            example: "2025-06"
          description: Month in YYYY-MM format (defaults to current month if not provided)
      responses:
        "200":
          description: Pocket's transaction history has been fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          example: "2025-06-15"
                        transactions:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              type:
                                type: string
                                example: Contribution
                              transaction_type:
                                type: integer
                                description: "1 for incoming, 0 for outgoing"
                                example: 1
                              amount:
                                type: number
                                example: 100000
                              description:
                                type: string
                                example: "Monthly saving"
                              is_business_expense:
                                type: boolean
                                example: false
                  message:
                    type: string
                    example: Pocket's transaction history has been fetched
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found or access denied

  /pocket/business/last-5:
    get:
      summary: Get last 5 business pocket transactions for the logged-in user
      tags:
        - Pocket
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Last 5 business pocket transactions fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: topup
                        description:
                          type: string
                          example: Monthly funding
                        amount:
                          type: number
                          example: 1000000
                        transaction_type:
                          type: integer
                          description: "1 for incoming, 0 for outgoing"
                          example: 1
                  message:
                    type: string
                    example: Pocket's transaction history has been fetched
                  code:
                    type: integer
                    example: 200
              example:
                ok: true
                data:
                  - type: topup
                    description: Monthly funding
                    amount: 1000000
                    transaction_type: 1
                  - type: purchase
                    description: Office supplies
                    amount: 250000
                    transaction_type: 0
                  - type: withdrawal
                    description: ATM withdrawal
                    amount: 500000
                    transaction_type: 0
                  - type: reimbursement
                    description: Business lunch
                    amount: 150000
                    transaction_type: 1
                  - type: payment
                    description: Software subscription
                    amount: 200000
                    transaction_type: 0
                message: Pocket's transaction history has been fetched
                code: 200
        "401":
          description: Unauthorized

  /pocket/business/{pocketId}/last-5:
    get:
      summary: Get last 5 business pocket transactions for a specific pocket
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
      responses:
        "200":
          description: Last 5 business pocket transactions fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          example: topup
                        description:
                          type: string
                          example: Monthly funding
                        amount:
                          type: number
                          example: 1000000
                        transaction_type:
                          type: integer
                          description: "1 for incoming, 0 for outgoing"
                          example: 1
                  message:
                    type: string
                    example: Pocket's transaction history has been fetched
                  code:
                    type: integer
                    example: 200
              example:
                ok: true
                data:
                  - type: topup
                    description: Monthly funding
                    amount: 1000000
                    transaction_type: 1
                  - type: purchase
                    description: Office supplies
                    amount: 250000
                    transaction_type: 0
                  - type: withdrawal
                    description: ATM withdrawal
                    amount: 500000
                    transaction_type: 0
                  - type: reimbursement
                    description: Business lunch
                    amount: 150000
                    transaction_type: 1
                  - type: payment
                    description: Software subscription
                    amount: 200000
                    transaction_type: 0
                message: Pocket's transaction history has been fetched
                code: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found or access denied

  /pocket/business/{pocketId}/history:
    get:
      summary: Get business pocket transaction history for a specific pocket and duration
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
        - in: query
          name: duration
          required: false
          schema:
            type: string
            enum: [30d, 3m, 6m, 1y]
            default: 30d
            example: 3m
          description: Duration for transaction history (last 30 days, 3 months, 6 months, or 1 year)
      responses:
        "200":
          description: Business pocket transaction history fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-06-17T02:10:53.934Z"
                        initiator_user:
                          type: string
                          example: "John Doe"
                        type:
                          type: string
                          example: Contribution
                        amount:
                          type: number
                          example: 100000
                        purpose:
                          type: string
                          example: "Monthly saving"
                        transaction_type:
                          type: integer
                          description: "1 for incoming, 0 for outgoing"
                          example: 1
                  message:
                    type: string
                    example: Pocket's transaction history has been fetched
                  code:
                    type: integer
                    example: 200
              example:
                ok: true
                data:
                  - createdAt: "2025-06-17T02:10:53.934Z"
                    initiator_user: "John Doe"
                    type: Contribution
                    amount: 100000
                    purpose: "Monthly saving"
                    transaction_type: 1
                  - createdAt: "2025-06-16T10:00:00.000Z"
                    initiator_user: "Jane Smith"
                    type: Payment
                    amount: 50000
                    purpose: "Office supplies"
                    transaction_type: 0
                message: Pocket's transaction history has been fetched
                code: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found or access denied

  /pocket/business/{pocketId}/bep:
    get:
      summary: Get BEP (Break Even Point) statistics for a business pocket
      tags:
        - Pocket
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
      responses:
        "200":
          description: BEP statistics fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    oneOf:
                      - type: object
                        description: Profit scenario
                        properties:
                          status:
                            type: string
                            example: profit
                          cleanProfit:
                            type: number
                            example: 2000000
                          profitPercentage:
                            type: number
                            example: 13.33
                          averageDailyCleanProfit:
                            type: number
                            example: 50000
                          estimatedDaysToBEP:
                            type: integer
                            example: 30
                      - type: object
                        description: Loss scenario
                        properties:
                          status:
                            type: string
                            example: loss
                          loss:
                            type: number
                            example: 1000000
                          averageDailyCleanProfit:
                            type: number
                            example: -20000
                          projections:
                            type: array
                            items:
                              type: object
                              properties:
                                increaseRate:
                                  type: string
                                  example: "10%"
                                increasedIncome:
                                  type: number
                                  example: 55000
                                projectedDailyProfit:
                                  type: number
                                  example: 5000
                                estimatedDaysToCoverLoss:
                                  type: integer
                                  example: 200
                  message:
                    type: string
                    example: Pocket's BEP statistic has been fetched
                  code:
                    type: integer
                    example: 200
              examples:
                profit:
                  value:
                    ok: true
                    data:
                      status: profit
                      cleanProfit: 2000000
                      profitPercentage: 13.33
                      averageDailyCleanProfit: 50000
                      estimatedDaysToBEP: 30
                    message: Pocket's BEP statistic has been fetched
                    code: 200
                loss:
                  value:
                    ok: true
                    data:
                      status: loss
                      loss: 1000000
                      averageDailyCleanProfit: -20000
                      projections:
                        - increaseRate: "10%"
                          increasedIncome: 55000
                          projectedDailyProfit: 5000
                          estimatedDaysToCoverLoss: 200
                        - increaseRate: "20%"
                          increasedIncome: 60000
                          projectedDailyProfit: 10000
                          estimatedDaysToCoverLoss: 100
                    message: Pocket's BEP statistic has been fetched
                    code: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (not owner or admin)
        "404":
          description: Pocket not found or not a business pocket

  /pocket/{pocketId}/members:
    get:
      summary: Get members of a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      responses:
        "200":
          description: Members of pocket fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 10
                        user_id:
                          type: integer
                          example: 6
                        pocket_id:
                          type: integer
                          example: 6
                        role:
                          type: string
                          enum: [owner, admin, spender, viewer]
                          example: owner
                        contribution_amount:
                          type: string
                          example: "6000000"
                        joined_at:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        is_active:
                          type: boolean
                          example: true
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        members:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 6
                            name:
                              type: string
                              example: "Fernando Manallu"
                            phone_number:
                              type: string
                              example: "62811111111"
                  message:
                    type: string
                    example: "Members of pocket fetched successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found

    delete:
        summary: Delete members from a pocket
        tags:
          - Pocket Member Management
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: pocketId
            required: true
            schema:
              type: integer
            description: ID of the pocket
            example: 6
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - members
                properties:
                  members:
                    type: array
                    items:
                      type: integer
                    example: [8, 2, 3]
                    description: Array of user IDs to delete from pocket
        responses:
          "200":
            description: Pocket member deleted successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    ok:
                      type: boolean
                      example: true
                    data:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "Members deleted successfully"
                        count:
                          type: integer
                          example: 1
                    message:
                      type: string
                      example: "Pocket member deleted successfully"
                    code:
                      type: integer
                      example: 200
          "401":
            description: Unauthorized
          "404":
            description: Pocket not found

  /pocket/{pocketId}/members/role:
    patch:
      summary: Update member role in a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - role
              properties:
                user_id:
                  type: integer
                  example: 7
                role:
                  type: string
                  enum: [owner, admin, spender, viewer]
                  example: spender
      responses:
        "200":
          description: Member role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Member role updated successfully"
                      updatedMember:
                        type: object
                        properties:
                          user_id:
                            type: integer
                            example: 7
                          new_role:
                            type: string
                            example: spender
                  message:
                    type: string
                    example: "Member role updated successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket or member not found


  /pocket/{pocketId}/members/change-owner:
    patch:
      summary: Change pocket owner
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_owner_id
              properties:
                new_owner_id:
                  type: integer
                  example: 7
      responses:
        "200":
          description: Pocket owner changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Pocket owner changed successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket or new owner not found


  /pocket/{pocketId}/leave:
    delete:
      summary: Leave a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket to leave
          example: 6
      responses:
        "200":
          description: Successfully left the pocket
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "You have left the pocket successfully"
                  message:
                    type: string
                    example: "Successfully left the pocket"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found or user not a member

  /pocket/business:
    get:
      summary: Get all business pockets for the authenticated user
      tags:
        - Pocket (Business)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of business pockets
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        pocket_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Toko Kue"
                        type:
                          type: string
                          example: "business"
                        target_nominal:
                          type: string
                          example: "10000000"
                        current_balance:
                          type: string
                          example: "5000000"
                        deadline:
                          type: string
                          format: date-time
                          example: "2025-12-31T00:00:00.000Z"
                        status:
                          type: string
                          example: "active"
                        icon_name:
                          type: string
                          example: "store"
                        color_hex:
                          type: string
                          example: "#FF6384"
                        account_number:
                          type: string
                          example: "PKT001234567891"
                        user_role:
                          type: string
                          example: "owner"
                  message:
                    type: string
                    example: Business pockets fetched successfully
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /pocket/business/stats:
    get:
      summary: Get business pocket statistics overview for the authenticated user
      tags:
        - Pocket (Business)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [overview, pemasukan, pengeluaran]
          description: Type of statistics to fetch (overview, pemasukan, or pengeluaran)
      responses:
        "200":
          description: Business pocket statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        x:
                          type: array
                          items:
                            type: string
                          example: ["Jan 2024", "Feb 2024", "Mar 2024"]
                        label:
                          type: string
                          example: Ringkasan
                        series:
                          type: object
                          additionalProperties:
                            type: object
                            properties:
                              data:
                                type: array
                                items:
                                  type: number
                                example: [100000, 200000, 150000]
                              color:
                                type: string
                                example: "#ff6384"
                  message:
                    type: string
                    example: Business pocket statistics fetched successfully
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /pocket/business/{pocketId}/stats:
    get:
      summary: Get statistics for a specific business pocket
      tags:
        - Pocket (Business)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [bulanan, tahunan]
          description: Type of statistics to fetch (bulanan or tahunan)
      responses:
        "200":
          description: Business pocket statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        x:
                          type: array
                          items:
                            type: string
                          example: ["Jan 2024", "Feb 2024", "Mar 2024"]
                        label:
                          type: string
                          example: Bulanan
                        series:
                          type: object
                          properties:
                            pemasukan:
                              type: object
                              properties:
                                data:
                                  type: array
                                  items:
                                    type: number
                                  example: [100000, 200000, 150000]
                                color:
                                  type: string
                                  example: "#81c784"
                            pengeluaran:
                              type: object
                              properties:
                                data:
                                  type: array
                                  items:
                                    type: number
                                  example: [50000, 80000, 60000]
                                color:
                                  type: string
                                  example: "#ff6384"
                  message:
                    type: string
                    example: Business pocket statistics fetched successfully
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found

  /pocket/{pocketId}/members:
    get:
      summary: Get members of a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      responses:
        "200":
          description: Members of pocket fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 10
                        user_id:
                          type: integer
                          example: 6
                        pocket_id:
                          type: integer
                          example: 6
                        role:
                          type: string
                          enum: [owner, admin, spender, viewer]
                          example: owner
                        contribution_amount:
                          type: string
                          example: "6000000"
                        joined_at:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        is_active:
                          type: boolean
                          example: true
                        createdAt:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2025-06-24T14:16:01.459Z"
                        members:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 6
                            name:
                              type: string
                              example: "Fernando Manallu"
                            phone_number:
                              type: string
                              example: "62811111111"
                  message:
                    type: string
                    example: "Members of pocket fetched successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found

    delete:
        summary: Delete members from a pocket
        tags:
          - Pocket Member Management
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: pocketId
            required: true
            schema:
              type: integer
            description: ID of the pocket
            example: 6
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - members
                properties:
                  members:
                    type: array
                    items:
                      type: integer
                    example: [8, 2, 3]
                    description: Array of user IDs to delete from pocket
        responses:
          "200":
            description: Pocket member deleted successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    ok:
                      type: boolean
                      example: true
                    data:
                      type: object
                      properties:
                        message:
                          type: string
                          example: "Members deleted successfully"
                        count:
                          type: integer
                          example: 1
                    message:
                      type: string
                      example: "Pocket member deleted successfully"
                    code:
                      type: integer
                      example: 200
          "401":
            description: Unauthorized
          "404":
            description: Pocket not found

  /pocket/{pocketId}/members/role:
    patch:
      summary: Update member role in a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - role
              properties:
                user_id:
                  type: integer
                  example: 7
                role:
                  type: string
                  enum: [owner, admin, spender, viewer]
                  example: spender
      responses:
        "200":
          description: Member role updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Member role updated successfully"
                      updatedMember:
                        type: object
                        properties:
                          user_id:
                            type: integer
                            example: 7
                          new_role:
                            type: string
                            example: spender
                  message:
                    type: string
                    example: "Member role updated successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket or member not found


  /pocket/{pocketId}/members/change-owner:
    patch:
      summary: Change pocket owner
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_owner_id
              properties:
                new_owner_id:
                  type: integer
                  example: 7
      responses:
        "200":
          description: Pocket owner changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Pocket owner changed successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket or new owner not found


  /pocket/{pocketId}/leave:
    delete:
      summary: Leave a pocket
      tags:
        - Pocket Member Management
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket to leave
          example: 6
      responses:
        "200":
          description: Successfully left the pocket
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "You have left the pocket successfully"
                  message:
                    type: string
                    example: "Successfully left the pocket"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: Pocket not found or user not a member

  /friendship:
    get:
      tags:
        - Friendship
      summary: Get all friendships (accepted and pending)
      description: Requires login. Returns list of friends excluding the current user, along with their friendship status.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Friendship details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        name:
                          type: string
                          example: Budi Santoso
                        phone_number:
                          type: string
                          example: "6281234567892"
                        status:
                          type: string
                          enum: [accepted, pending]
                          example: accepted
                        accepted_at:
                          type: string
                          format: date-time
                          nullable: true
                          example: "2024-01-16T00:00:00.000Z"
                  message:
                    type: string
                    example: Friendship details fetched successfully
                  code:
                    type: integer
                    example: 200
              example:
                ok: true
                data:
                  - id: 3
                    name: Budi Santoso
                    phone_number: "6281234567892"
                    status: accepted
                    accepted_at: "2024-01-16T00:00:00.000Z"
                  - id: 4
                    name: Wati Andini
                    phone_number: "6281234567899"
                    status: pending
                    accepted_at: null
                message: Friendship details fetched successfully
                code: 200

  /friendship/request:
    post:
      summary: Send friendship requests to multiple users by user phone numbers
      tags:
        - Friendship
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_numbers
              properties:
                phone_numbers:
                  type: array
                  items:
                    type: string
                  example: ['6281234567890', '6281234567891']
            example:
              phone_numbers: ['6281234567890', '6281234567891']
      responses:
        "200":
          description: Friendship requests sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Friendship requests sent
                      added:
                        type: array
                        items:
                          type: string
                        example: ["6281219461153"]
                      skipped:
                        type: array
                        items:
                          type: string
                        example: []
                  message:
                    type: string
                    example: Friendship requests sent
                  code:
                    type: integer
                    example: 200
              examples:
                success:
                  value:
                    ok: true
                    data:
                      message: Friendship requests sent
                      added:
                        - "6281219461153"
                      skipped: []
                    message: Friendship requests sent
                    code: 200
        "400":
          description: Bad request (invalid input or all users already friends)
        "401":
          description: Unauthorized
        "404":
          description: None of the target users exist
    get:
      summary: Get all friendship requests (sent and received)
      tags:
        - Friendship
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Friendship requests fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      sent:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 7
                            user_id_1:
                              type: integer
                              example: 5
                            user_id_2:
                              type: integer
                              example: 6
                            status:
                              type: string
                              enum: [pending, accepted, rejected]
                              example: pending
                            accepted_at:
                              type: string
                              format: date-time
                              nullable: true
                              example: null
                      received:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 6
                            user_id_1:
                              type: integer
                              example: 3
                            user_id_2:
                              type: integer
                              example: 5
                            status:
                              type: string
                              enum: [pending, accepted, rejected]
                              example: pending
                            accepted_at:
                              type: string
                              format: date-time
                              nullable: true
                              example: null
                  message:
                    type: string
                    example: "Friendship requests fetched successfully"
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized

  /friendship/request/{requestId}:
    patch:
      summary: Handle friendship request (accept or reject)
      tags:
        - Friendship
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: integer
          description: ID of the friendship request
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [accept, reject]
                  example: accept
      responses:
        "200":
          description: Friendship request processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: "Friendship request accepted"
                      request:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 6
                          status:
                            type: string
                            example: accepted
                          user_id_1:
                            type: integer
                            example: 3
                          user_id_2:
                            type: integer
                            example: 5
                          accepted_at:
                            type: string
                            format: date-time
                            example: "2025-06-24T14:19:35.478Z"
                          createdAt:
                            type: string
                            format: date-time
                            example: "2024-02-01T00:00:00.000Z"
                          updatedAt:
                            type: string
                            format: date-time
                            example: "2025-06-24T14:19:35.478Z"
                  message:
                    type: string
                    example: "Friendship request accepted"
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Friendship request not found

  /transaction/topup:
    post:
      summary: Top up a pocket from user's mock savings account
      tags:
        - Transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - balance
                - pocket_id
              properties:
                balance:
                  type: number
                  example: 100000
                pocket_id:
                  type: integer
                  example: 4
      responses:
        "200":
          description: Topup to pocket success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 123
                      pocket_id:
                        type: integer
                        example: 4
                      initiator_user_id:
                        type: integer
                        example: 2
                      type:
                        type: string
                        example: Topup
                      amount:
                        type: number
                        example: 100000
                      purpose:
                        type: string
                        example: Topup to Arisan Keluarga - John Doe
                      status:
                        type: string
                        example: completed
                      description:
                        type: string
                        nullable: true
                        example: null
                      is_business_expense:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-18T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-18T10:00:00.000Z
                  message:
                    type: string
                    example: Topup to pocket success
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or user is not a member of that pocket
        "400":
          description: Not enough balance or bad request

  /transaction/withdraw:
    post:
      summary: Withdraw from a pocket to user's mock savings account
      tags:
        - Transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - balance
                - pocket_id
              properties:
                balance:
                  type: number
                  example: 50000
                pocket_id:
                  type: integer
                  example: 4
      responses:
        "200":
          description: Withdraw from pocket success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 321
                      pocket_id:
                        type: integer
                        example: 4
                      initiator_user_id:
                        type: integer
                        example: 2
                      type:
                        type: string
                        example: Withdrawal
                      amount:
                        type: number
                        example: 50000
                      purpose:
                        type: string
                        example: Withdrawal from Arisan Keluarga - John Doe
                      status:
                        type: string
                        example: completed
                      description:
                        type: string
                        nullable: true
                        example: null
                      is_business_expense:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-18T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-18T10:00:00.000Z
                  message:
                    type: string
                    example: Withdraw from pocket success
                  code:
                    type: integer
                    example: 200
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or user is not a member of that pocket
        "400":
          description: Balance to withdraw is over your contribution or bad request

  /transaction/set-auto-budget/{pocketId}:
    post:
      summary: Set auto budget for a pocket
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket to set auto budget for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recurring_amount
                - schedule_type
                - schedule_value
              properties:
                recurring_amount:
                  type: number
                  example: 100000
                schedule_type:
                  type: string
                  enum: [weekly, monthly]
                  example: weekly
                  description: Type of schedule (weekly or monthly)
                schedule_value:
                  type: integer
                  example: 2
                  description: For weekly, 1=Monday, 7=Sunday. For monthly, 1-28 (day of month).
                status:
                  type: string
                  example: active
                  description: "Status of the auto budget (default: active)"
      responses:
        "200":
          description: Auto budget set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 2
                      pocket_id:
                        type: integer
                        example: 4
                      recurring_amount:
                        type: number
                        example: 100000
                      schedule_type:
                        type: string
                        example: weekly
                      schedule_value:
                        type: integer
                        example: 2
                      next_run_date:
                        type: string
                        format: date-time
                        example: 2025-07-01T03:00:00.000Z
                      status:
                        type: string
                        example: active
                      is_active:
                        type: boolean
                        example: true
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                  message:
                    type: string
                    example: Success set auto budget
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized

  /transaction/auto-budget/{pocketId}:
    get:
      summary: Get active auto budget(s) for a pocket and user
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket to fetch auto budget for
      responses:
        "200":
          description: List of active auto budgets for the pocket and user
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 2
                        pocket_id:
                          type: integer
                          example: 4
                        recurring_amount:
                          type: number
                          example: 100000
                        treshold_amount:
                          type: number
                          example: 0
                        status:
                          type: string
                          example: active
                        is_active:
                          type: boolean
                          example: true
                        schedule_type:
                          type: string
                          example: monthly
                        schedule_value:
                          type: integer
                          example: 15
                        next_run_date:
                          type: string
                          format: date-time
                          example: 2025-07-15T03:00:00.000Z
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-06-25T10:00:00.000Z
                        updatedAt:
                          type: string
                          format: date-time
                          example: 2025-06-25T10:00:00.000Z
                  message:
                    type: string
                    example: Success fetch auto budget
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or no active auto budget
    delete:
      summary: Delete the active auto budget for a pocket and user
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the pocket to delete auto budget for
      responses:
        "200":
          description: Success delete auto budget
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      user_id:
                        type: integer
                        example: 2
                      pocket_id:
                        type: integer
                        example: 4
                      recurring_amount:
                        type: number
                        example: 100000
                      treshold_amount:
                        type: number
                        example: 0
                      status:
                        type: string
                        example: active
                      is_active:
                        type: boolean
                        example: true
                      schedule_type:
                        type: string
                        example: monthly
                      schedule_value:
                        type: integer
                        example: 15
                      next_run_date:
                        type: string
                        format: date-time
                        example: 2025-07-15T03:00:00.000Z
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-25T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-25T10:00:00.000Z
                  message:
                    type: string
                    example: Success delete auto budget
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or no active auto budget

  /transaction/transfer:
    post:
      summary: Transfer from a pocket to a destination account (with approval if needed)
      tags:
        - Transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - balance
                - pocket_id
                - destination
              properties:
                balance:
                  type: number
                  example: 50000
                pocket_id:
                  type: integer
                  example: 4
                destination:
                  type: string
                  example: "REKENING SESEORANG"
                description:
                  type: string
                  example: "Pembayaran ke vendor"
      responses:
        "200":
          description: Transfer from pocket success (may require approval)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 555
                      pocket_id:
                        type: integer
                        example: 4
                      initiator_user_id:
                        type: integer
                        example: 2
                      type:
                        type: string
                        example: Transfer
                      amount:
                        type: number
                        example: 50000
                      purpose:
                        type: string
                        example: Transfer ke [REKENING SESEORANG]
                      status:
                        type: string
                        example: pending
                      description:
                        type: string
                        example: Pembayaran ke vendor
                      is_business_expense:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                      splitData:
                        type: array
                        description: Only present if approval is required (split transfer)
                        items:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              example: 3
                            amount:
                              type: number
                              example: 25000
                  message:
                    type: string
                    example: Transfer from pocket success
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request or unable to distribute full transfer amount across members
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or user is not a member of that pocket

  /transaction/transfer/{transactionId}:
    patch:
      summary: Respond to a transfer approval request
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: integer
          description: ID of the transaction to respond to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [accepted, rejected]
                  example: accepted
      responses:
        "200":
          description: Approval response processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 555
                      pocket_id:
                        type: integer
                        example: 4
                      initiator_user_id:
                        type: integer
                        example: 2
                      type:
                        type: string
                        example: Transfer
                      amount:
                        type: number
                        example: 50000
                      purpose:
                        type: string
                        example: Transfer ke [REKENING SESEORANG]
                      status:
                        type: string
                        example: completed
                      description:
                        type: string
                        example: Pembayaran ke vendor
                      is_business_expense:
                        type: boolean
                        example: false
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-21T10:00:00.000Z
                  message:
                    type: string
                    example: User has responded with accepted, and transfer has been done.
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request or already responded
        "401":
          description: Unauthorized
        "404":
          description: Transaction or approval data not found
        "409":
          description: Conflict (already processed or not authorized)

  /transaction/transfer/schedule:
    post:
      summary: Set a scheduled recurring transfer from a pocket
      tags:
        - Transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pocket_id
                - balance
                - destination
                - date
                - start
                - end
              properties:
                pocket_id:
                  type: integer
                  example: 2
                balance:
                  type: number
                  example: 100000
                destination:
                  type: string
                  example: "REKENING SESEORANG"
                date:
                  type: string
                  format: date
                  example: "2025-07-15"
                  description: Day of month to run the transfer (as date string, only day part is used)
                start:
                  type: string
                  format: date
                  example: "2025-07-01"
                  description: Start date of the recurring schedule
                end:
                  type: string
                  format: date
                  example: "2025-12-31"
                  description: End date of the recurring schedule
      responses:
        "200":
          description: Scheduled transfer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 10
                      user_id:
                        type: integer
                        example: 2
                      pocket_id:
                        type: integer
                        example: 2
                      recurring_amount:
                        type: number
                        example: 100000
                      treshold_amount:
                        type: number
                        example: 0
                      status:
                        type: string
                        example: active
                      is_active:
                        type: boolean
                        example: true
                      schedule_type:
                        type: string
                        example: monthly
                      schedule_value:
                        type: integer
                        example: 15
                      next_run_date:
                        type: string
                        format: date-time
                        example: 2025-07-15T03:00:00.000Z
                      createdAt:
                        type: string
                        format: date-time
                        example: 2025-06-25T10:00:00.000Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2025-06-25T10:00:00.000Z
                  message:
                    type: string
                    example: Set transfer schedule from pocket success
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request or insufficient balance
        "401":
          description: Unauthorized
        "404":
          description: User/Pocket not found or user is not a member of that pocket

    get:
      summary: Get all active scheduled transfers for a business pocket (admin/owner only)
      tags:
        - Transaction
      security:
        - bearerAuth: []
      requestBody:
        required: false
      parameters:
        - in: path
          name: pocket_id
          required: true
          schema:
            type: integer
          description: ID of the business pocket
      responses:
        "200":
          description: List of active scheduled transfers for the pocket
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 12
                        recurring_amount:
                          type: number
                          example: 100000
                        next_run_date:
                          type: string
                          format: date-time
                          example: 2025-07-15T03:00:00.000Z
                        status:
                          type: string
                          example: active
                        detail:
                          type: object
                          nullable: true
                          properties:
                            auto_budget_id:
                              type: integer
                              example: 12
                            destination:
                              type: string
                              example: "REKENING SESEORANG"
                            user_id:
                              type: integer
                              example: 2
                            pocket_id:
                              type: integer
                              example: 4
                            start_date:
                              type: string
                              format: date-time
                              example: 2025-07-01T03:00:00.000Z
                            end_date:
                              type: string
                              format: date-time
                              example: 2025-12-31T03:00:00.000Z
                  message:
                    type: string
                    example: Transfer schedule has been fetched from pocket
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (not admin/owner)
        "404":
          description: User/Pocket not found or not a business pocket

  /transaction/transfer/schedule/{pocketId}/{scheduleId}:
    get:
      summary: Get detail of a scheduled transfer for a business pocket
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
        - in: path
          name: scheduleId
          required: true
          schema:
            type: integer
          description: ID of the scheduled transfer
      responses:
        "200":
          description: Scheduled transfer detail fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 12
                      recurring_amount:
                        type: number
                        example: 100000
                      next_run_date:
                        type: string
                        format: date-time
                        example: 2025-07-15T03:00:00.000Z
                      status:
                        type: string
                        example: active
                      detail:
                        type: object
                        nullable: true
                        properties:
                          auto_budget_id:
                            type: integer
                            example: 12
                          destination:
                            type: string
                            example: "REKENING SESEORANG"
                          user_id:
                            type: integer
                            example: 2
                          pocket_id:
                            type: integer
                            example: 4
                          start_date:
                            type: string
                            format: date-time
                            example: 2025-07-01T03:00:00.000Z
                          end_date:
                            type: string
                            format: date-time
                            example: 2025-12-31T03:00:00.000Z
                  message:
                    type: string
                    example: Transfer schedule has been fetched from pocket
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (not admin/owner)
        "404":
          description: Schedule not found or user/pocket not found

    delete:
      summary: Delete a scheduled transfer for a business pocket
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: pocketId
          required: true
          schema:
            type: integer
          description: ID of the business pocket
        - in: path
          name: scheduleId
          required: true
          schema:
            type: integer
          description: ID of the scheduled transfer
      responses:
        "200":
          description: Scheduled transfer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 12
                      recurring_amount:
                        type: number
                        example: 100000
                      next_run_date:
                        type: string
                        format: date-time
                        example: 2025-07-15T03:00:00.000Z
                      status:
                        type: string
                        example: active
                      detail:
                        type: object
                        nullable: true
                        properties:
                          auto_budget_id:
                            type: integer
                            example: 12
                          destination:
                            type: string
                            example: "REKENING SESEORANG"
                          user_id:
                            type: integer
                            example: 2
                          pocket_id:
                            type: integer
                            example: 4
                          start_date:
                            type: string
                            format: date-time
                            example: 2025-07-01T03:00:00.000Z
                          end_date:
                            type: string
                            format: date-time
                            example: 2025-12-31T03:00:00.000Z
                  message:
                    type: string
                    example: Transfer schedule has been fetched from pocket
                  code:
                    type: integer
                    example: 200
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (not admin/owner)
        "404":
          description: Schedule not found or user/pocket not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
